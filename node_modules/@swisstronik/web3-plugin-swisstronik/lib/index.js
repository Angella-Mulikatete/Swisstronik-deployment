"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwisstronikPlugin = void 0;
const web3_1 = require("web3");
const SWTRMiddleware_1 = require("./SWTRMiddleware");
const utils_1 = require("@swisstronik/utils");
class SwisstronikPlugin extends web3_1.Web3PluginBase {
    constructor(rpcEndpoint) {
        super();
        this.pluginNamespace = "swisstronik";
        if (rpcEndpoint)
            SwisstronikPlugin.rpcEndpoint = rpcEndpoint;
        this.middleware = new SWTRMiddleware_1.SWTRMiddleware(this.getNodePublicKey);
    }
    link(parentContext) {
        parentContext.requestManager.setMiddleware(this.middleware);
        parentContext.eth.setTransactionMiddleware(this.middleware);
        const clientUrl = parentContext?.currentProvider?.clientUrl;
        if (!SwisstronikPlugin.rpcEndpoint &&
            clientUrl &&
            typeof clientUrl === "string") {
            SwisstronikPlugin.rpcEndpoint = clientUrl;
        }
        SwisstronikPlugin.web3 = new web3_1.Web3(parentContext.provider);
        this.middleware.web3 = SwisstronikPlugin.web3;
        super.link(parentContext);
    }
    async getNodePublicKey() {
        if (!SwisstronikPlugin.rpcEndpoint)
            throw new Error("RPC endpoint is not set");
        let { publicKey } = await (0, utils_1.getNodePublicKey)(SwisstronikPlugin.rpcEndpoint);
        return publicKey;
    }
}
exports.SwisstronikPlugin = SwisstronikPlugin;
//# sourceMappingURL=index.js.map
import { JsonRpcRequest, Web3 } from "web3";
import { Web3APIMethod, JsonRpcResponse, Web3APIReturnType } from "web3-types";
import { TransactionMiddleware, TransactionMiddlewareData } from "web3-eth/src/types";
import { RequestManagerMiddleware } from "web3-core";
export declare class SWTRMiddleware<API = any> implements RequestManagerMiddleware<API>, TransactionMiddleware {
    private getNodePublicKey;
    web3: Web3;
    private cachedRequestById;
    private isDataEncrypted;
    constructor(getNodePublicKey: () => Promise<string>);
    processTransaction(transaction: TransactionMiddlewareData): Promise<TransactionMiddlewareData>;
    processRequest(request: JsonRpcRequest<any>): Promise<JsonRpcRequest<any>>;
    processResponse<Method extends Web3APIMethod<API>, ResponseType = Web3APIReturnType<API, Method>>(response: JsonRpcResponse<ResponseType>, options?: {
        [key: string]: unknown;
    }): Promise<{
        id: import("web3").JsonRpcId;
        jsonrpc: import("web3").JsonRpcIdentifier;
        error: import("web3").JsonRpcError<import("web3").JsonRpcResult>;
        result?: never;
    } | {
        id: import("web3").JsonRpcId;
        jsonrpc: import("web3").JsonRpcIdentifier;
        error?: never;
        result: ResponseType;
    } | {
        [x: number]: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>;
        length: number;
        toString(): string;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
        pop(): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>) | undefined;
        push(...items: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]): number;
        concat(...items: ConcatArray<import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>>[]): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[];
        concat(...items: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType> | ConcatArray<import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>>)[]): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[];
        join(separator?: string): string;
        reverse(): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[];
        shift(): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>) | undefined;
        slice(start?: number, end?: number): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[];
        sort(compareFn?: ((a: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, b: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>) => number) | undefined): import("web3").JsonRpcBatchResponse<ResponseType, import("web3").JsonRpcResult>;
        splice(start: number, deleteCount?: number): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[];
        splice(start: number, deleteCount: number, ...items: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[];
        unshift(...items: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]): number;
        indexOf(searchElement: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, fromIndex?: number): number;
        lastIndexOf(searchElement: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, fromIndex?: number): number;
        every<S extends import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>>(predicate: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => U, thisArg?: any): U[];
        filter<S extends import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>>(predicate: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => value is S, thisArg?: any): S[];
        filter(predicate: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => unknown, thisArg?: any): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[];
        reduce(callbackfn: (previousValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentIndex: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>): import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>;
        reduce(callbackfn: (previousValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentIndex: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, initialValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>): import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>;
        reduce<U>(callbackfn: (previousValue: U, currentValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentIndex: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentIndex: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>): import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>;
        reduceRight(callbackfn: (previousValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentIndex: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, initialValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>): import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, currentIndex: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => U, initialValue: U): U;
        find<S extends import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>>(predicate: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, obj: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => value is S, thisArg?: any): S | undefined;
        find(predicate: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, obj: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => unknown, thisArg?: any): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>) | undefined;
        findIndex(predicate: (value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, obj: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => unknown, thisArg?: any): number;
        fill(value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, start?: number, end?: number): import("web3").JsonRpcBatchResponse<ResponseType, import("web3").JsonRpcResult>;
        copyWithin(target: number, start: number, end?: number): import("web3").JsonRpcBatchResponse<ResponseType, import("web3").JsonRpcResult>;
        entries(): IterableIterator<[number, import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>>;
        includes(searchElement: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, fromIndex?: number): boolean;
        flatMap<U, This = undefined>(callback: (this: This, value: import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>, index: number, array: (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>)[]) => U | ReadonlyArray<U>, thisArg?: This | undefined): U[];
        flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
        [Symbol.iterator](): IterableIterator<import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>>;
        [Symbol.unscopables]: {
            [x: number]: boolean | undefined;
            length?: boolean | undefined;
            toString?: boolean | undefined;
            toLocaleString?: boolean | undefined;
            pop?: boolean | undefined;
            push?: boolean | undefined;
            concat?: boolean | undefined;
            join?: boolean | undefined;
            reverse?: boolean | undefined;
            shift?: boolean | undefined;
            slice?: boolean | undefined;
            sort?: boolean | undefined;
            splice?: boolean | undefined;
            unshift?: boolean | undefined;
            indexOf?: boolean | undefined;
            lastIndexOf?: boolean | undefined;
            every?: boolean | undefined;
            some?: boolean | undefined;
            forEach?: boolean | undefined;
            map?: boolean | undefined;
            filter?: boolean | undefined;
            reduce?: boolean | undefined;
            reduceRight?: boolean | undefined;
            find?: boolean | undefined;
            findIndex?: boolean | undefined;
            fill?: boolean | undefined;
            copyWithin?: boolean | undefined;
            entries?: boolean | undefined;
            keys?: boolean | undefined;
            values?: boolean | undefined;
            includes?: boolean | undefined;
            flatMap?: boolean | undefined;
            flat?: boolean | undefined;
            [Symbol.iterator]?: boolean | undefined;
            readonly [Symbol.unscopables]?: boolean | undefined;
            at?: boolean | undefined;
        };
        at(index: number): (import("web3").JsonRpcResponseWithError<import("web3").JsonRpcResult> | import("web3").JsonRpcResponseWithResult<ResponseType>) | undefined;
    } | {
        id?: import("web3").JsonRpcId;
        jsonrpc: import("web3").JsonRpcIdentifier;
        method: string;
        params: import("web3").SubscriptionParams<ResponseType>;
        result?: never;
        data?: never;
        error?: never;
    }>;
}
//# sourceMappingURL=SWTRMiddleware.d.ts.map